- case: test_testcases_client_api
  parametrized:
  - test_class: APITransactionTestCase
  - test_class: APITestCase
  - test_class: APISimpleTestCase
  - test_class: APILiveServerTestCase
  main: |
    from rest_framework import test, status

    class MyTest(test.{{ test_class }}):
        def test_example(self) -> None:
            reveal_type(self.client) # N: Revealed type is "rest_framework.test.APIClient"
            response = self.client.get('/', format="json")
            self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)
            self.assertEqual(response.data, {"detail": {"not_found"}})

- case: test_testcases_client_api_urlpatterns
  main: |
    from typing import Union, List
    from django.urls import URLPattern, URLResolver
    from rest_framework import test, status

    class MyTest(test.URLPatternsTestCase):
        urlpatterns : List[Union[URLPattern, URLResolver]] = []
        def test_example(self) -> None:
            reveal_type(self.client) # N: Revealed type is "django.test.client.Client"
            response = self.client.get('/', format="json")
            self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)

- case: test_api_client_get
  main: |
    from rest_framework import test

    client = test.APIClient()
    response = client.get('/', format="json")
    reveal_type(response) # N: Revealed type is "rest_framework.response._MonkeyPatchedResponse"

- case: test_api_client_factory_get
  main: |
    from rest_framework import test

    factory = test.APIRequestFactory()
    request = factory.get("/")
    reveal_type(request) # N: Revealed type is "rest_framework.request.Request"
